{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56d7e74d-330f-4958-841c-2fd27bdfe752",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import openai\n",
    "import os\n",
    "from dotenv import load_dotenv\n",
    "import pandas as pd\n",
    "\n",
    "# ✅ API 키 불러오기\n",
    "load_dotenv()\n",
    "openai.api_key = os.getenv(\"OPENAI_API_KEY\")\n",
    "\n",
    "# ✅ GPT 요약 함수\n",
    "def generate_sector_comment(strong_sectors, weak_sectors, period):\n",
    "    prompt = f\"\"\"\n",
    "다음은 {period} 기준으로 Finviz에서 수집한 섹터별 수익률 데이터입니다.\n",
    "\n",
    "📈 강세 섹터:\n",
    "{strong_sectors}\n",
    "\n",
    "📉 약세 섹터:\n",
    "{weak_sectors}\n",
    "\n",
    "이 데이터를 기반으로\n",
    "1. 어떤 섹터가 강세/약세인지,\n",
    "2. 왜 그럴 수 있는지,\n",
    "3. 투자자 입장에서 해석을 간결하게 3줄로 요약해줘.\n",
    "    \"\"\"\n",
    "    response = openai.ChatCompletion.create(\n",
    "        model=\"gpt-4o\",\n",
    "        messages=[\n",
    "            {\"role\": \"system\", \"content\": \"너는 금융 시장 분석가야. 핵심만 간결하게 코멘트해.\"},\n",
    "            {\"role\": \"user\", \"content\": prompt}\n",
    "        ],\n",
    "        temperature=0.5,\n",
    "    )\n",
    "    return response.choices[0].message.content\n",
    "\n",
    "# ✅ Finviz 섹터 데이터 크롤링\n",
    "def fetch_sector_data(view_code):\n",
    "    url = f\"https://finviz.com/groups.ashx?g=sector&v={view_code}\"\n",
    "    headers = {\"User-Agent\": \"Mozilla/5.0\"}\n",
    "    res = requests.get(url, headers=headers)\n",
    "    soup = BeautifulSoup(res.text, \"html.parser\")\n",
    "    table = soup.find(\"table\", class_=\"table-light\")\n",
    "\n",
    "    data = []\n",
    "    for row in table.find_all(\"tr\")[1:]:  # 첫 줄은 헤더\n",
    "        cols = row.find_all(\"td\")\n",
    "        if len(cols) >= 3:\n",
    "            sector = cols[1].text.strip()\n",
    "            change = cols[2].text.strip().replace(\"%\", \"\")\n",
    "            try:\n",
    "                change = float(change)\n",
    "                data.append((sector, change))\n",
    "            except:\n",
    "                continue\n",
    "    df = pd.DataFrame(data, columns=[\"Sector\", \"Performance\"])\n",
    "    return df.sort_values(by=\"Performance\", ascending=False)\n",
    "\n",
    "# ✅ Streamlit 앱\n",
    "st.set_page_config(page_title=\"Finviz 섹터 분석 GPT 에이전트\", layout=\"wide\")\n",
    "st.title(\"📊 Finviz 섹터별 수익률 분석 + GPT 요약\")\n",
    "st.caption(\"Made by YOU. 데이터: Finviz | 분석: GPT-4o\")\n",
    "\n",
    "# ✅ 사용자 선택 (기간)\n",
    "period_map = {\n",
    "    \"1일\": (\"오늘\", 210),\n",
    "    \"1주\": (\"이번 주\", 110),\n",
    "    \"1달\": (\"이번 달\", 140),\n",
    "}\n",
    "selected_period = st.selectbox(\"📆 비교 기간을 선택하세요:\", list(period_map.keys()))\n",
    "\n",
    "if st.button(\"📈 분석 시작\"):\n",
    "    label, code = period_map[selected_period]\n",
    "    with st.spinner(f\"{label} 기준 섹터 데이터를 가져오는 중...\"):\n",
    "        df = fetch_sector_data(code)\n",
    "\n",
    "    st.subheader(f\"{label} 기준 Finviz 섹터 수익률\")\n",
    "    st.dataframe(df, use_container_width=True)\n",
    "\n",
    "    top = df.head(3).to_string(index=False)\n",
    "    bottom = df.tail(3).to_string(index=False)\n",
    "\n",
    "    with st.spinner(\"GPT가 해석 중입니다...\"):\n",
    "        comment = generate_sector_comment(top, bottom, label)\n",
    "\n",
    "    st.markdown(\"### 🧠 GPT 분석 코멘트\")\n",
    "    st.write(comment)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
